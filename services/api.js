/*
Class Description: 
    - This class provides a helper method that allows the application to interact 
      with the Spotify Web API by acquiring an access token via Spotify's Client
      Credentials OAuth 2.0 flow authentication method.

    - This class also contains methods to retrive an an album, artist, and audiobook by 
      their name or ID.
*/

//Imports
import axios from 'axios'; //A JS library for making HTTP requests
import qs from 'qs';       /*A JS library to arrange/serialize JS objects into query strings so that 
                             the Spotify Web API can take in URL-encoded form data*/

/*Helper methods*/

/*A method that utilizes the Client Credentials Flow of Spotify's OAuth 2.0 to authenticate the 
application using its client credentials and retrieve an access token required for accessing 
Spotify's Web API.*/
export const getToken = async () => {
    /*Obtaining client's credentials 
        Note: This info was recieved when making the Spotify app on their developer website)*/
    const clientId = '70b48a4c6d1d43f5ad000d464a08027d';
    const clientSecret = 'e2e7ab1528674c478c56393c70be3009';

    try{
        //This URL is used for Spotify's token endpoint
        const tokenUrl = 'https://accounts.spotify.com/api/token';

        /*A variable that creates a POST request to the token's endpoint via axois so 
          that the program can obtain the access token
          
          The parameters of the POST request include:
            URL:    Where you're sending the request (endpoint)
            Data:   The type of data your sending
            Config: The information/settings (like headers) needed to complete the request*/
        const response = await axios.post
            (tokenUrl, qs.stringify({grant_type: 'client_credentials'}), {
                    headers: {
                            /*We utilize Buffer to encode the client's credentials so that Spotify can verify
                              that the program is requesting information from a verified app*/
                            'Authorization': 'Basic ' + Buffer.from(clientId + ':' + clientSecret).toString('base64'),
                            'Content-Type': 'application/x-www-form-urlencoded',
                        }
                }
            );
    
        /*Utilizes the successful Promise (generated by axios) to obtain the access token from the 
          response.data JSON object, and returns it to be used by the other methods that are 
          requesting data from the Spotify Web API
          
          Note: An example of what the response.data JSON object might look like is this 
            {
                "access_token": "BQDg...abc123",
                "token_type": "Bearer",
                "expires_in": 3600
            }*/
        return response.data.access_token;
    }
    catch(error){
        console.error(`Error: ${error.message}`);
    }
    
};

/* 2 methods to search the API either by the name or ID*/

/*
    The searchByName function takes in two parameters: the accessToken and the name to search for.
    It uses Spotify's default search endpoint: https://api.spotify.com/v1/search. This function
    builds on that base URL by appending the search term (name) and specifying the types to search
    for, such as albums, artists, audiobooks, and tracks. The final URL is structured in a way that
    Spotify's API can recognize and respond to. Since this method performs a broad search across
    multiple content types, it returns more general data, rather than a single, specific object. 
*/
export const searchByName = async (name) => {
    try {
        const accessToken = await getToken();
        const searchURL = 'https://api.spotify.com/v1/search';
        const response = await axios.get(
            `${searchURL}?q=${encodeURIComponent(name)}&type=artist`, {
                params: { limit: 10 ,market: 'US' },
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                }
            }
        );
        return response.data;
    } catch (error) {
        console.error(`Error in searchByName: ${error.message}`);
    }
};

/*

    The getByID function takes three parameters: accessToken, type, and the item's id.
    Unlike the searchByName function, which uses Spotify's general search endpoint,
    this function relies on a type-specific endpoint. That’s why the URL structure
    is a bit different — it's built to retrieve a single, specific object.
    The function constructs the final URL by appending the content type
    (such as artist, album, or audiobook) and the item's ID to the base URL.
    This allows the API to return the exact object associated with that ID. 

*/
export const getByID = async (type, id) => {
    try {
        const accessToken = await getToken();
        const url = `https://api.spotify.com/v1/${type}s/${id}`;
        const response = await axios.get(url, {
            headers: {
                'Authorization': 'Bearer ' + accessToken,
            }
        });
        return response.data;
    } catch (error) {
        console.error(`Error in getByID: ${error.message}`);
    }
};